;;;
;;; Copyright (c) 2014, Fereshta Yazdani <yazdani@cs.uni-bremen.de>
;;; All rights reserved.
;; 
;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions are met:
;;; 
;;;     * Redistributions of source code must retain the above copyright
;;;       notice, this list of conditions and the following disclaimer.
;;;     * Redistributions in binary form must reproduce the above copyright
;;;       notice, this list of conditions and the following disclaimer in the
;;;       documentation and/or other materials provided with the distribution.
;;;     * Neither the name of the Institute for Artificial Intelligence/
;;;       Universitaet Bremen nor the names of its contributors may be used to 
;;;       endorse or promote products derived from this software without 
;;;       specific prior written permission.
;;; 
;;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
;;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;; POSSIBILITY OF SUCH DAMAGE.

(defun btr::add-costmap-function-object (costmap height angle)
  (format t "costmap is: ~a~%" costmap)
  (sb-thread:with-mutex (*debug-window-lock*)
    (when (and *current-costmap-function* *debug-window*)
      (setf (gl-objects *debug-window*)
            (remove *current-costmap-function* (gl-objects *debug-window*))))
    (when costmap
      (let* ((map-array (location-costmap:get-cost-map costmap))
             (max-val (loop for y from 0 below (array-dimension map-array 1)
                            maximizing (loop for x from 0 below (array-dimension map-array 1)
                                             maximizing (aref map-array y x)))))
        (declare (type cma:double-matrix map-array))
        (flet ((costmap-function (x y)
                 (let ((val (/ (location-costmap:get-map-value costmap x y) max-val)))
                   (when (> val 0.01)
                     val))))
          (setf *current-costmap-function*
                (make-instance 'math-function-object
                  :width (location-costmap:grid-width costmap)
                  :height (location-costmap:grid-height costmap)
                  :alpha 0.5 :color-fun #'costmap-color-fun
                  :pose (cl-transforms:make-pose
                         (cl-transforms:make-3d-vector
                          (+ (location-costmap:origin-x costmap)
                             (/ (location-costmap:grid-width costmap) 2))
                          (+ (location-costmap:origin-y costmap)
                             (/ (location-costmap:grid-height costmap) 2))
                          height)
                       ;  (cl-transforms:make-quaternion 0 0 0 1))
                             (cl-transforms:axis-angle->quaternion
                                               (cl-transforms:make-3d-vector 0 1 0)
                                               -0.25))
                  :function #'costmap-function
                  :step-size (location-costmap:resolution costmap)))))
      (when *debug-window*
        (push *current-costmap-function* (gl-objects *debug-window*))))))